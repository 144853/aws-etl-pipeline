name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        type: string
      confirm_production:
        description: 'Type "CONFIRM" to deploy to production'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: prod

jobs:
  validate-input:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    steps:
      - name: Validate confirmation
        if: github.event.inputs.confirm_production != 'CONFIRM'
        run: |
          echo "Production deployment not confirmed. Please type 'CONFIRM' to proceed."
          exit 1
          
      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Please use format: v1.2.3"
            exit 1
          fi

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: validate-input
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Terraform Init
        working-directory: terraform/environments/prod
        run: terraform init
        
      - name: Terraform Plan
        working-directory: terraform/environments/prod
        run: terraform plan -var-file="../../../config/prod.tfvars"

  approval:
    name: Manual Approval
    runs-on: ubuntu-latest
    needs: terraform-plan
    environment: prod-approval
    steps:
      - name: Approval checkpoint
        run: echo "Deployment approved for production"

  backup:
    name: Create Backup
    runs-on: ubuntu-latest
    needs: approval
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Create database backup
        run: |
          python scripts/backup_database.py --environment prod
          
      - name: Backup S3 data
        run: |
          python scripts/backup_s3.py --environment prod

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: backup
    environment: prod
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Terraform Init
        working-directory: terraform/environments/prod
        run: terraform init
        
      - name: Terraform Apply
        working-directory: terraform/environments/prod
        run: terraform apply -auto-approve -var-file="../../../config/prod.tfvars"
        
      - name: Deploy Glue Jobs
        run: |
          python scripts/deploy_glue_jobs.py --environment prod
          
      - name: Run Database Migrations
        run: |
          python scripts/run_migrations.py --environment prod
          
  post-deployment:
    name: Post Deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Run production tests
        run: |
          python -m pytest tests/production/ -v
          
      - name: Health check
        run: |
          python scripts/health_check.py --environment prod
          
      - name: Notify deployment success
        run: |
          echo "ðŸš€ Production deployment of ${{ github.event.inputs.version }} completed successfully!"